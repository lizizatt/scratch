#!/usr/bin/env python3

import curses
import math
import random
import sys
import time

REFERSH_RATE = 120
TRAIL_LEN = 10
EXPLOSION_FRAMES = 6

def bound(a, min, max):
    if a < min:
        return min
    if a >= max:
        return max - 1
    return a

def bounce(stdscr, state):
    height, width = stdscr.getmaxyx()

    if not "init" in state:
        state["init"] = True
        state["trail"] = []
        state["i"] = int(width / 2)
        state["j"] = int(width / 2)
        state["motion"] = [1, 1]
        state["cur_color"] = 0
            
    
    trail = state["trail"]
    i = state["i"]
    j = state["j"]
    motion = state["motion"]
    cur_color = state["cur_color"]

    if i >= width - 1 or i <= 0:
        motion[0] *= -1
    if j >= height - 1 or j <= 0:
        motion[1] *= -1

    i += motion[0]
    j += motion[1]
    
    i = bound(i, 0, width)
    j = bound(j, 0, height)

    cur_color = (cur_color + 1) % n_colors
    trail.append((i, j, cur_color))
    if (len(trail) > TRAIL_LEN):
        trail = trail[1:]

    stdscr.clear()
    for (i, j, c) in trail:
        stdscr.addstr(j, i, "*", curses.color_pair(c + 1))

    state["trail"] = trail
    state["i"] = i
    state["j"] = j
    state["motion"] = motion
    state["cur_color"] = cur_color

def dist(a, b):
    return math.sqrt(math.pow(a[0] - b[0], 2) + math.pow(a[1] - b[1], 2))

def dodge(stdscr, state, getchs):

    SPEED = 1
    PLAYER_INVULN_LEN = .5
    INIT_SAFE_TIME = 2.0

    height, width = stdscr.getmaxyx()
    stdscr.clear()

    if not "init" in state or not state["init"]:
        state["init"] = True
        state["init_time"] = time.time()
        state["player_pos"] = [int(width / 2), int(height / 2)]
        state["explosions"] = []
        state["next_exp_time"] = time.time() - 1
        state["total_movement"] = 0
        state["player_health"] = 3
        state["player_hit_time"] = 0
        state["num_explosions_survived"] = 0

    #move, using local variables so we can compute the delta to compute score
    i, j = state["player_pos"]
    if (119 in getchs): #w
        j -= SPEED

    if (97 in getchs): #a
        i -= SPEED

    if (115 in getchs): #s
        j += SPEED

    if (100 in getchs): #d
        i += SPEED
    state["total_movement"] += dist((i, j), state["player_pos"])
    state["player_pos"] = [i, j]

    i = min(max(i, 0), width - 1)
    j = min(max(j, 0), height - 1)

    #explosion will go off at the indicated time.time()
    #after that, it will be around for 1 second as a danger zone, anything in danger zone dies
    explosions = state["explosions"]
    next_exp_time = state["next_exp_time"]
    t = time.time()
    #spawn explosions, only after some time has passed since start
    if t > (state["init_time"] + INIT_SAFE_TIME) and t > next_exp_time:
        explosions.append([int(random.random() * width / 4 + i - width / 4),
                           int(random.random() * height / 4 + j - height / 4),
                           int(random.random() * 10 + 3),
                           time.time() + 1.0])
        if random.random() < 0.5:
            explosions[len(explosions) - 1][2] = int(random.random() * -4)
        state["next_exp_time"] = time.time() + .5 + random.random()


    #player turns red while invuln
    player_col = 0
    player_invuln = state["player_hit_time"] > 0 and (t - state["player_hit_time"]) < PLAYER_INVULN_LEN
    if player_invuln:
        player_col = 1

    #process explosions
    for explosion in explosions:
        exp_i, exp_j, exp_rad, ep_det_t = explosion

        #explosion hangs around for N frames
        if (t > ep_det_t + 1.0 / REFERSH_RATE * EXPLOSION_FRAMES):
            explosions.remove(explosion)
            state["num_explosions_survived"] += 1
            continue

        #draw
        color_id = 2
        if (t > ep_det_t): #red if fire, yellow if telegraph
            color_id = 1
        if exp_rad > 0:
            for exp_ii in range(max(exp_i - exp_rad, 0), min(exp_i + exp_rad, width - 1)):
                for exp_jj in range(max(exp_j - exp_rad, 0), min(exp_j + exp_rad, height - 1)):
                    if (dist((exp_ii, exp_jj), (exp_i, exp_j)) < exp_rad):
                        stdscr.addstr(exp_jj, exp_ii, "*", curses.color_pair(color_id))
        else:
            d = abs(exp_rad)
            r = (ep_det_t - t) * math.pi * 0.5 if abs(exp_rad) <= 2 else 0
            for exp_ii in range(0, width - 1):
                for exp_jj in range(0, height - 1):
                    x_rel = exp_ii - exp_i
                    y_rel = exp_jj - exp_j
                    x_rel_rot = x_rel * math.cos(r) - y_rel * math.sin(r)
                    y_rel_rot = y_rel * math.cos(r) + x_rel * math.sin(r)
                    if abs(x_rel_rot) < d or abs(y_rel_rot) < d:
                        stdscr.addstr(exp_jj, exp_ii, "*", curses.color_pair(color_id))

        #compute damage, end if game death
        if t > ep_det_t and not player_invuln and  dist((i, j), (exp_i, exp_j)) < exp_rad:
            state["player_health"] = state["player_health"] - 1
            state["player_hit_time"] = time.time()
            if (state["player_health"] <= 0):
                #game over screen -- wait for keypress
                game_over_str = "Game Over!  moved: {}, survived: {}".format(state["total_movement"], state["num_explosions_survived"])
                stdscr.clear()
                stdscr.addstr(int(height / 2), int(width / 2 - len(game_over_str) / 2), game_over_str, curses.color_pair(0))
                #block until player hits a key
                stdscr.nodelay(0)
                stdscr.getch()
                stdscr.nodelay(1)
                #force reinit
                state["init"] = False
                pass


    state["explosions"] = explosions

    #draw status and gui
    stdscr.addstr(0, 0, "blm simulator 2021", curses.color_pair(1))
    health_str = "<3 " * state["player_health"]
    score_str = "moved: {}, survived: {}".format(state["total_movement"], state["num_explosions_survived"])
    stdscr.addstr(0, width - len(score_str) - len(health_str), health_str, curses.color_pair(1))
    stdscr.addstr(0, width - len(score_str), score_str, curses.color_pair(2))

    #draw player, overwriting explosion if in it
    stdscr.addstr(j, i, "*", curses.color_pair(player_col))

    pass

def main(stdscr):

    modes = ["bounce", "dodge"]
    mode_funcs = [bounce, dodge]
    mode_states = [{}] * len(modes)
    mode = 1

    curses.curs_set(0)
    height, width = stdscr.getmaxyx()
    stdscr.nodelay(1) # set getch() non-blocking

    curses.init_pair(1, curses.COLOR_RED, curses.COLOR_BLACK)
    curses.init_pair(2, curses.COLOR_YELLOW, curses.COLOR_BLACK)
    curses.init_pair(3, curses.COLOR_GREEN, curses.COLOR_BLACK)
    curses.init_pair(4, curses.COLOR_BLUE, curses.COLOR_BLACK)
    curses.init_pair(5, curses.COLOR_MAGENTA, curses.COLOR_BLACK)
    n_colors = 5

    bounce_state = {}
    while(True):
        #update height and width
        stdscr.refresh()
        #todo, find a way to get multiple key presses so we can do more complex input
        chs = [stdscr.getch()]
        if (32 in chs): #space
            mode = (mode + 1) % len(modes)
        mode_funcs[mode](stdscr, mode_states[mode], chs)
        time.sleep(1.0 / REFERSH_RATE)

if __name__=='__main__':
    #general globals
    height = 0
    width = 0
    n_colors = 5

    curses.wrapper(main)

